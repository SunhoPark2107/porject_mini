모델 설계 과정.

1. 어떤 변수를 선택해야 모델의 성능을 높일 수 있을까?

과정1) 모델링에 사용할 수 없는 변수를 버리자!
=> 삭제한 컬럼 : date 형식으로 되어 있는 컬럼(연, 월, 일) => "도착 월" 데이터만 범주형으로 남기고 모두 삭제.
=> 누가 봐도 쓸데없는데, 범주형이어서 더미화하면 컬럼이 너무 늘어나는 것들을 없애자! => reserved_room_type, asigned_room_type. 

과정2) 변수의 속성을 변경하자!
=> 자녀들의 특성을 children, babies로 나누어 놓았는데, 자녀의 수 보다는 자녀의 유무 특성이 더 유효할 것으로 판단, children과 babies속성을 삭제하고 자녀의 유무를 0과 1로 나타내는 kids 컬럼을 추가.
=> 총 방문인원을 나타내는 total_guest 열을 추가하고, 각 방문객의 연령층을 나타내는 adults, children, babies열은 삭제.
=> agent열은 숫자형이지만, 여행사의 id를 나타내는 사실상 범주형 특성임. 또한 여행사의 개수가 많아 이를 그대로 사용하는 것은 모델링에 적합하지 않다고 판단하여, agent를 여행사 이용 여부를 0과 1로 나누는 특성으로 변경하였음.

과정 3) 후진제거법을 활용하자!

과정 4) rf모델링 후 변수중요도 순으로 특성을 제거해 보자!
=> 변수 중요도 별로 특성을 drop하며 성능 체크를 하였으나, 성능에 큰 변화가 없었음.

최종적으로 결정한 내용: 특성들 간의 상관관계가 크지 않고, 모듈을 활용한 방법을 몇 가지 적용하여 보았으나 의미있는 수준의 성능 개선이 이루어 지지 않았음.

=> 따라서 최종적으로, 우리가 생각했을 때 유의미하다고 판단되는 변수를 선택하여 일반 사람들에게 설명력이 있으면서도 어느 정도 성능을 이끌어 낼 수 있는 모델을 구현하고자 함.

==> 최종 특성선택 과정: 

특성 선택 기준
1. 가장 직관적으로 취소에 영향이 있을 것이라고 생각되는 데이터들을 선정.
2. 모델에 반영하기 쉬운 이산형 데이터를 우선적으로 고려하였음.
3. 범주형일 경우, unique 값이 너무 많은 특성은 탈락시킴.

=> 이 세 가지 기준에 따라 변수 중요도를 상, 중, 하로 나누고, 최종 회의를 통해 16개의 설명변수를 선택하였음.


2. 어떤 분류기 모델을 사용할 것인가?

다양한 분류기 모델을 적용해 봄.
=> 트리 계열 분류기(dt, rf, gbrt)에서는 매개변수값에 따라 오버피팅 문제 발생.
=> 최근접 이웃 모델(knn)역시 오버피팅 문제 발생.
=> 서포트 벡터 머신 분류기(SVC)는 오버피팅이 크게 발생하지 않고, 어느 정도의 성능을 내지만, 분류에 걸리는 시간이 너무 오래 걸림.
=> lr은 오버피팅이 발생하지 않고, 모델링에 걸리는 시간도 길지 않지만, 성능이 다른 모델들에 비해 낮았음.

=> GridSearch를 통하여 각 모델의 매개변수값 조정.
=> 교차검증을 통하여 각 모델별 최적 매개변수 모델의 안정성 확인.

=> 결론: 트리 계열 분류기의 성능이 준수하면서 시간도 적정하게 걸렸으므로, 매개변수 값의 조정을 통해 오버피팅 문제를 해결하기로 결정.

